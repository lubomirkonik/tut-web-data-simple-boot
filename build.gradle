//{!apply plugin: 'war'}
apply plugin: 'tomcat'
apply plugin: 'spring-boot'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

jar {
    baseName = 'tut-web-data-simple-boot'
    version =  '0.1.0'
}

println "PROJECT=" + project.name

buildscript {
  repositories {
    
    mavenCentral()
    maven {
      url "http://download.java.net/maven/2"
    }
    maven { url 'http://repo.spring.io/plugins-release' }
    
    maven { url "http://repo.spring.io/libs-snapshot" }
    //{!jpa}
    //{!maven { url "http://repo.spring.io/libs-milestone" }}
    mavenLocal()
  }

  dependencies {
  	classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.8'
    classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.1'
    
    classpath("org.springframework.boot:spring-boot-gradle-plugin:0.5.0.M6")
  }
}


//{!begin repos}
repositories {
  
  mavenCentral()

  maven { url 'http://repo.spring.io/milestone/'}
  
  maven { url "http://repo.spring.io/libs-snapshot" }
  //{!jpa}
  maven { url "http://repo.spring.io/libs-milestone" }
  maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
  //{!gemfire}
  maven { url "http://dist.gemstone.com.s3.amazonaws.com/maven/release" }
  //{!maven { url 'http://repo.spring.io/libs-release'}}
  mavenLocal()
}
//{!end repos}

dependencies {
  def tomcatVersion = '7.0.42'
  tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
          "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
  tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
    exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
  }
  
  compile 'javax.validation:validation-api:1.1.0.Final'
  compile 'org.hibernate:hibernate-validator:5.0.1.Final'

  compile 'org.springframework:spring-core:3.2.3.RELEASE'
  compile 'org.springframework:spring-webmvc:3.2.3.RELEASE'

  compile 'org.springframework.security:spring-security-web:3.2.0.M2'
  compile 'org.springframework.security:spring-security-core:3.2.0.M2'
  compile 'org.springframework.security:spring-security-config:3.2.0.M2'

  compile 'org.slf4j:slf4j-api:1.7.5'
  runtime 'org.slf4j:slf4j-log4j12:1.7.5'

  compile 'org.thymeleaf:thymeleaf-spring3:2.0.18'

  testCompile 'org.springframework:spring-test:3.2.3.RELEASE'
  testCompile 'junit:junit:4.11'
  testCompile "org.mockito:mockito-core:1.9.5"
  //{!testCompile "org.mockito:mockito-all:1.9.5"}
  testCompile "org.hamcrest:hamcrest-library:1.3"

  provided 'javax.servlet:javax.servlet-api:3.0.1'
  
  compile 'org.springframework.data:spring-data-mongodb:1.2.3.RELEASE'
  compile 'org.springframework.data:spring-data-jpa:1.3.4.RELEASE'
  compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
  compile 'org.hibernate:hibernate-entitymanager:4.0.1.Final'
  runtime 'com.h2database:h2:1.3.173'

  compile 'org.springframework.data:spring-data-gemfire:1.3.2.RELEASE'

  compile 'cglib:cglib:2.2.2'

  ['spring-core','spring-orm', 'spring-aop', 'spring-beans', 'spring-tx', 'spring-expression', 'spring-context'].each {
    compile "org.springframework:$it:3.2.3.RELEASE"
  }
  
  compile("org.springframework.boot:spring-boot-starter-web:0.5.0.M6")
  //{!mongodb}
  compile("org.springframework.boot:spring-boot-starter-data-jpa:0.5.0.M6")
  compile("org.springframework.data:spring-data-mongodb:1.3.2.RELEASE")
  //{!jpa}
  compile("org.springframework:spring-orm:4.0.0.RC1")
  compile("org.springframework.data:spring-data-jpa:1.4.1.RELEASE")
  compile("org.hibernate:hibernate-entitymanager:4.2.1.Final")
  //{!h2database:h2}
  
  //{!gemfire}
  compile("org.springframework.data:spring-data-gemfire:1.3.3.RELEASE")
  compile("com.gemstone.gemfire:gemfire:7.0.1")
}

test {
  testLogging {
    // Show that tests are run in the command-line output
    events 'started', 'passed'
  }
}

task wrapper(type: Wrapper) { gradleVersion = '1.8' }

tomcatRunWar.contextPath = ''

task run(type: JavaExec) {
  description = 'Runs a simple Gemfire Cache Server'
  main = "tut.webdata.services.LocalGemfireServer"
  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in
}